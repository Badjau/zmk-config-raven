    #include <behaviors.dtsi>
    #include <dt-bindings/zmk/keys.h>
    #include <dt-bindings/zmk/bt.h>
//https://zmk.dev/docs/keymaps/behaviors/sticky-key
    / {
        behaviors {
            alt_f4: alt_f4_morph {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp E>, <&kp F4>;
                mods = <(MOD_LALT|MOD_RALT)>;
                keep-mods = <(MOD_LALT|MOD_RALT)>;
            };

            mt: mod_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                bindings = <&kp>, <&skq>;
                flavor = "hold-preferred";
                hold-while-undecided;
                hold-while-undecided-linger;  // prevents shift release between hold and sticky
                display-name = "Mod-Tap";
            };

            skq: sticky_key_quick_release {
                compatible = "zmk,behavior-sticky-key";
                #binding-cells = <1>;
                bindings = <&kp>;
                release-after-ms = <500>;
                quick-release;
                ignore-modifiers;
            };

            skl: sticky_key_lazy {
                compatible = "zmk,behavior-sticky-key";
                #binding-cells = <1>;
                bindings = <&kp>;
                release-after-ms = <500>;
                ignore-modifiers;
                lazy;
            };
            
            spc_del: space_delete {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp SPACE>, <&kp DELETE>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
                keep-mods = <(MOD_RSFT)>;
            };
    
            win_z: win_z_hold_tap {
                compatible = "zmk,behavior-hold-tap";
                label = "WIN_Z _HOLD_TAP";
                #binding-cells = <2>;
                tapping-term-ms = <200>; //hold timer to send hold key
                quick-tap-ms = <500>; //when tapped within timer, disable hold and send tap; for repeated presses
                require-prior-idle-ms = <125>; //When key press before timer, disable hold
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };

            not_so_sticky: not_so_sticky { //useful for combinations
                compatible = "zmk,behavior-sticky-key";
                label = "NOT_SO_STICKY";
                #binding-cells = <1>;
                bindings = <&mo>;
                release-after-ms = <800>; 
                ignore-modifiers;
                //no 'quick-release' makes it linger even after a keypress
            };

            td_layer1: tap_dance_layer {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_LAYER";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&sl 2>, <&to 2>;    // First tap = sticky layer 2, double tap = switch to layer 2
            };

            slmo1: sticky_momentary_layer {
                compatible = "zmk,behavior-hold-tap";
                label = "STICKY_MOMENTARY_LAYER";
                #binding-cells = <2>;
                tapping-term-ms = <250>;
                quick-tap-ms = <0>;
                flavor = "balanced";
                bindings = <&mo>, <&td_layer1>;  // Hold for momentary, tap for tap-dance behavior ex:&slmo 1 2
            };
    
            td_layer2: tap_dance_layer2 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_LAYER2";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&not_so_sticky 3>, <&to 3>;    // First tap = sticky layer 1, double tap = switch to layer 1
            };

            slmo2: sticky_momentary_layer2 {
                compatible = "zmk,behavior-hold-tap";
                label = "STICKY_MOMENTARY_LAYER2";
                #binding-cells = <2>;
                tapping-term-ms = <250>;
                quick-tap-ms = <0>;
                flavor = "balanced";
                bindings = <&mo>, <&td_layer2>;  // Hold for momentary, tap for tap-dance behavior ex:&slmo 1 2
            };
        
            altenter: alt_enter {
                compatible = "zmk,behavior-tap-dance";
                label = "ALT_ENTER";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&kp LALT>, <&kp ENTER>;    // First tap = LALT, double tap = ENTER
            };
        };
        macros {
            sleep_macro: sleep_macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LGUI>
                    , <&macro_tap &kp X>
                    , <&macro_release &kp LGUI>
                    , <&macro_tap &kp U>
                    , <&macro_tap &kp S>;
            };
        };
        combos {
            compatible = "zmk,combos";
            combo_esc {
                timeout-ms = <50>;
                key-positions = <0 1>; //TAB + Q
                bindings = <&kp ESC>;
                layers = <0 1 2 3 4>;
            };
            combo_capslock {
                timeout-ms = <50>;
                key-positions = <12 13>; // SHIFT + A
                bindings = <&kp CAPSLOCK>;
                layers = <0 1 2 3 4>;
            };
        };
        
        keymap {    
            compatible = "zmk,keymap";
            default_layer {
                display-name = "Base";
                bindings = <   
                    &kp TAB             &kp Q           &kp W       &alt_f4     &kp R       &kp T       &kp Y      &kp U        &kp I       &kp O       &kp P       &kp BSLH  
                    &mt LSHFT LSHFT     &kp A           &kp S       &kp D       &kp F       &kp G       &kp H      &kp J        &kp K       &kp L       &kp SEMI    &kp APOS   
                    &mt LCTRL LCTRL     &win_z LGUI Z   &kp X       &kp C       &kp V       &kp B       &kp N      &kp M        &kp COMMA   &kp DOT     &kp SLASH   &mo 5 
                                                                    &slmo1 2 2  &spc_del    &altenter   &kp ENTER  &kp BSPC     &slmo2 4 4  
                >;
            };
            // Layer 1 (Activated on Tap)
            Game_layer {
                display-name = "Game";
                bindings = <   
                    &kp N1      &kp TAB         &kp Q       &kp W       &kp E       &kp R       &kp Y      &kp U        &kp I       &kp O       &kp P       &kp BSLH  
                    &kp N2      &kp LSHFT       &kp A       &kp S       &kp D       &kp F       &kp H      &kp J        &kp K       &kp L       &kp SEMI    &kp APOS   
                    &kp N3      &kp LCTRL       &kp Z       &kp X       &kp C       &kp V       &kp N      &kp M        &kp COMMA   &kp DOT     &kp SLASH   &to 0
                                                            &mo 2       &kp SPACE   &kp LALT    &kp ENTER  &kp BSPC     &mo 4  
                >;
            };
            // Layer 2 (Activated on hold)
            Num_layer {
                display-name = "Num";
                bindings = <
                    &kp GRAVE       &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp GRAVE 
                    &skl LSHFT      &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT   &kp CARET   &kp AMPS    &kp STAR    &kp LPAR    &kp RPAR    &kp MINUS
                    &skl LCTRL      &kp LEFT    &kp UP      &kp DOWN    &kp RIGHT   &kp BSPC    &kp LBKT    &kp RBKT    &trans      &trans      &trans      &kp EQUAL
                                                            &to 0       &trans      &altenter   &trans      &trans      &to 0 
                >;
            };

            // Layer 3 (Activated on tap)
            F_keys {
                display-name = "FN"; 
                bindings = <
                    &kp F1          &kp F2      &kp F3      &kp F4      &kp F5      &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11     &kp F12
                    &trans          &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                    &trans          &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans 
                                                            &to 0       &trans      &trans      &kp K_APP   &trans      &to 0  
                >;
            };

            // Layer 4 (Activated on hold)
            Nav_layer {
                display-name = "MOVE";
                bindings = <
                    &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &kp UP      &trans      &kp HOME       &kp END 
                    &trans      &trans      &trans      &trans      &trans      &trans      &trans      &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_UP      &trans 
                    &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &kp PG_DN      &trans 
                                                        &trans      &trans      &trans      &trans      &trans      &trans  
                    >;
                };
            // Layer 5 (Activated on hold)
            Shortcut_layer {
                display-name = "XCUT";
                bindings = <
                    &soft_off       &trans      &trans          &trans      &trans      &trans      &soft_off       &trans          &kp INS      &kp PSCRN       &kp C_MUTE    &kp C_VOL_UP 
                    &bootloader     &trans      &sleep_macro    &trans      &trans      &to 1       &bootloader     &kp C_PREV      &kp C_PP     &kp C_NEXT      &trans        &kp C_VOL_DN 
                    &trans          &trans      &trans          &trans      &trans      &trans      &trans          &trans          &trans       &bt BT_NXT      &trans        &trans 
                                                                &trans      &trans      &trans      &trans          &bt BT_CLR      &trans 
                >;
            };
        };
    };  